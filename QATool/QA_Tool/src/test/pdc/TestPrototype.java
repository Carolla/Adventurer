/**
 * TestPrototype.java Copyright (c) 2016, Carolla Development, Inc. All Rights Reserved
 * 
 * Permission to make digital or hard copies of all or parts of this work for commercial use is
 * prohibited. To republish, to post on servers, to reuse, or to redistribute to lists, requires
 * prior specific permission and/or a fee. Request permission to use from Carolla Development, Inc.
 * by email: acline@carolla.com
 */


package test.pdc;

import static org.junit.Assert.assertTrue;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import mylib.MsgCtrl;
import pdc.Prototype;
import pdc.QAUtils;
import pdc.QAUtils.FileType;

/**
 * @author --generated by QA Tool--
 * @version July 26, 2016 // original <br>
 */
public class TestPrototype
{
   private Prototype _proto;

   /**
    * @throws java.lang.Exception
    */
   @BeforeClass
   public static void setUpBeforeClass() throws Exception
   {}

   /**
    * @throws java.lang.Exception
    */
   @AfterClass
   public static void tearDownAfterClass() throws Exception
   {}

   /**
    * @throws java.lang.Exception
    */
   @Before
   public void setUp() throws Exception
   {
      _proto = new Prototype();
   }

   /**
    * @throws java.lang.Exception
    */
   @After
   public void tearDown() throws Exception
   {
      MsgCtrl.auditMsgsOn(false);
      MsgCtrl.errorMsgsOn(false);
      _proto = null;
   }


   // ======================================================================
   // BEGIN TESTS
   // ======================================================================

   /**
    * @NORMAL_TEST File augmentTestFile(File, ArrayList, ArrayList)
    */
   @Test
   public void testAugmentTestFile()
   {
      MsgCtrl.auditMsgsOn(true);
      MsgCtrl.errorMsgsOn(true);
      MsgCtrl.where(this);

      String srcName = "/Projects/eChronos/QATool/QATestbed/src/pdc/SrcMissingSomeTests.java";
      String testName =
            "/Projects/eChronos/QATool/QATestbed/src/test/pdc/TestSrcMissingSomeTests.java";
      String holdName =
            "/Projects/eChronos/QATool/QATestbed/src/test/pdc/TestSrcMissingSomeTests.hold";
      String newMethod = "didItWork()";

      // SETUP
      // Copy the test file so as to restore state after the original file is augmented
      File testFile = new File(testName);
      File holdFile = new File(holdName);
      if (!saveCopy(testFile, holdFile)) {
         MsgCtrl.msgln("\tError trying to make tmp file for " + srcName);
      } else {
         MsgCtrl.msgln("\t" + testFile.getName() + 
               " copied to " + holdFile.getName() + " successfully.");
      }
      // Get the methods from the srcFile
      ArrayList<String> srcList = QAUtils.collectMethods(srcName, FileType.SOURCE);
      QAUtils.outList(srcName + " methods", srcList);
      // Add one method to the test list
      ArrayList<String> augList = new ArrayList<String>();
      augList.add(newMethod);
      QAUtils.outList("Methods to add to " + testName, augList);

      // RUN
      _proto.augmentTestFile(testFile, srcList, augList);
      
      // VERIFY: test file should now have 1 more method than before
      assertTrue(testName.equals(testFile.getAbsolutePath()));
      MsgCtrl.msgln("\t" + testName + " has been augmented");
      
//      ArrayList<String> augTestList = QAUtils.collectMethods(testName, FileType.TEST);
//      assertEquals(srcList.size() + 1, augTestList.size());

      // TEARDOWN: Return original file to pre-test state
      MsgCtrl.msgln("\tRestoring state of original test file " + holdFile.getName());
      assertTrue(testFile.delete());
      assertTrue(holdFile.renameTo(testFile));
   }


   // ======================================================================
   // PRIVATE HELPER METHODS
   // ======================================================================

   /**
    * @NORMAL_TEST ArrayList forceUnique(ArrayList)
    */
   @Test
   public void testForceUnique()
   {
      MsgCtrl.auditMsgsOn(false);
      MsgCtrl.errorMsgsOn(false);
      MsgCtrl.where(this);

      MsgCtrl.errMsgln("\t\t TEST METHOD NOT YET IMPLEMENTED");
   }

   /**
    * @NORMAL_TEST File writeNewTestFile(File, ArrayList, ArrayList)
    */
   @Test
   public void testWriteNewTestFile()
   {
      MsgCtrl.auditMsgsOn(false);
      MsgCtrl.errorMsgsOn(false);
      MsgCtrl.where(this);

      MsgCtrl.errMsgln("\t\t TEST METHOD NOT YET IMPLEMENTED");
   }

   // ======================================================================
   // PRIVATE HELPER METHODS
   // ======================================================================
   
   /**
    * Copy one file to a temp file
    * 
    * @param readIn file to read from
    * @param writeOut file to write to
    * @return true if all goes well; else false
    */
   private boolean saveCopy(File readIn, File writeOut)
   {
      // Create temp file to write to until finished
      Scanner in = null;
      PrintWriter out = null;
      try {
         in = new Scanner(readIn);
         out = new PrintWriter(writeOut);
      } catch (FileNotFoundException e) {
         System.err.println("\t" + e.getMessage());
         return false;
      }
      // Copy until no more input
      while (in.hasNextLine()) {
         out.println(in.nextLine());
      }
      // Close both files
      in.close();
      out.close();
      return true;
   }

} 	// end of TestPrototype.java class
