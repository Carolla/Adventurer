/**
 * Prototype.java Copyright (c) 2016, Carolla Development, Inc. All Rights Reserved
 * 
 * Permission to make digital or hard copies of all or parts of this work for commercial use is
 * prohibited. To republish, to post on servers, to reuse, or to redistribute to lists, requires
 * prior specific permission and/or a fee. Request permission to use from Carolla Development, Inc.
 * by email: acline@carolla.com
 */

package pdc;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Date;

/**
 * @author Alan Cline
 * @version Jan 29, 2016 // original <br>
 */
public class Prototype
{
  /** The prototype test class actually is written by a text-savvy output stream */
  PrintWriter _writer;
  /** The File to handle I/O stats */
  File _protoFile;

  /** Copyright banner at top of file */
  private final String COPYRIGHT =
      "/** %s Copyright (c) 2016, Carolla Development, Inc. All Rights Reserved \n * \n" +
          " * Permission to make digital or hard copies of all or parts of this work for \n" +
          " * commercial use is prohibited. To republish, to post on servers, to reuse, \n" +
          " * or to redistribute to lists, requires prior specific permission and/or a fee. \n" +
          " * Request permission to use from Carolla Development, Inc. by email: \n" +
          " * acline@carolla.com \n */";

  /** Set of JUnit import statements */
  private final String JUNIT_IMPORTS =
      "import static org.junit.Assert.*; \n" +
          "import org.junit.After; \n" +
          "import org.junit.AfterClass; \n" +
          "import org.junit.Before; \n" +
          "import org.junit.BeforeClass; \n" +
          "import org.junit.Test; \n";

  /** Class header comments, author, and version and definition */
  private final String AUTHOR_VERSION =
      "/** \n * @author --generated by QA Tool--\n" +
          " * @version %1$tB %1$te, %1$tY \t// original <br>\n */\n" +
          "public class %s\n{";

  /** Standard setup and teardown methods */
  private final String PREP_DECLARE =
      "\t/** \n\t * @throws java.lang.Exception\n \t */ \n\t" +
          "%s\n\tpublic %svoid %s throws Exception\n\t{ }\n\n";

  /** BEGIN TESTS Banner */
  private final String DBL_HRULE =
      "// ===============================================================================\n";

  private final String BANNER =
      "\t" + DBL_HRULE + "\t// BEGIN TESTS\n\t" + DBL_HRULE + "\n";


  // ======================================================================
  // CONSTRUCTORS AND ITS HELPER
  // ======================================================================

  // Default constructor
  public Prototype()
  {}


  // ======================================================================
  // PUBLIC METHODS
  // ======================================================================


  /**
   * Create an empty test file in a corresponding directory as the source's directory. <br>
   * 
   * @param testDir highest directory in which to place the test file created
   * @param srcName path of the source file that will correspond to the target test file created
   * @return the File created
   */
  public File createFile(File testDir, String srcName)
  {
    // Guard against bad combination of directory and source file
    if (!testDir.isDirectory()) {
      System.err.println("createFile: testDir must be a directory");
      return null;
    }
    // Guard against bad combination of directory and source file
    if (new File(srcName).isDirectory()) {
      System.err.println("createFile: srcName cannot be a directory");
      return null;
    }

    // Extract then traverse subdirectories to 'write' destination
    String[] subdirList = srcName.split("/");
    File parent = testDir;
    int k = 0;
    // Create subdirectories as traversing to the srcName
    for (; k < subdirList.length - 1; k++) {
      File subdir = new File(parent, subdirList[k]);
      subdir.mkdir(); // make the subdir if it doesn't exist
      parent = subdir;
    }
    // Last file in subdirList is the prototype's filename
    String targetName = parent.getAbsolutePath() + "/Test" + subdirList[k];
    _protoFile = new File(targetName);
    try {
      _writer = new PrintWriter(_protoFile);
    } catch (IOException e) {
      System.err.println("\tcreateFile(): Problems creating the new protoFile. " + e.getMessage());
    }
    _writer.close();
    return _protoFile;
  }


  /**
   * Write the target file with JUnit test stubs and Chronos-specific data
   * 
   * @param target prototype test file to write into
   * @return the File written
   */
  public File writeFile(File target)
  {
    PrintWriter out = null;
    try {
      out = new PrintWriter(target.getAbsolutePath());
    } catch (FileNotFoundException e) {
      System.err.print("\twriteFilet(): Couldn't find " + target.getAbsolutePath());
      System.err.println("\t\t" + e.getMessage());
    }
    // 1. Write the copyright notice into the prototype
    String copyright = String.format(COPYRIGHT, _protoFile.getName());
    out.println(copyright);

    // 2. Write the package statements for this test class
    String pkgStatement = String.format("\nimport test.%s;\n", target.getParentFile().getName());
    out.println(pkgStatement);

    // 3. Write the JUnit import statements
    out.println(JUNIT_IMPORTS);

    // 4. Write header comment, author, and version
    String version = String.format(AUTHOR_VERSION, new Date(), target.getName());
    out.println(version);

    // 5a. Write the four JUnit setup and teardown methods
    out.println(writePrepMethods());

    // 5b. Write the Begin Tests banner
    out.println(BANNER);

    out.close();
    return target;

  }

  // ======================================================================
  // PRIVATE HELPER METHODS
  // ======================================================================

  private String writePrepMethods()
  {
    String staticStr = "static ";
    String[] arg = {"@BeforeClass", "setUpBeforeClass()", "@AfterClass", "tearDownAfterClass()",
        "@Before", "setUp()", "@After", "tearDown()"};

    StringBuilder block = new StringBuilder();
    for (int k = 0; k < arg.length; k = k + 2) {
      if (k > 2) {
        staticStr = "\b";
      }
      String s = String.format(PREP_DECLARE, arg[k], staticStr, arg[k + 1]);
      block.append(s);
    }
    return block.toString();
  }


} // end of Prototype class
