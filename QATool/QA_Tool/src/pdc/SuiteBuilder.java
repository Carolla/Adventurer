/**
 * SuiteBuilder.java Copyright (c) 2016, Carolla Development, Inc. All Rights Reserved
 * 
 * Permission to make digital or hard copies of all or parts of this work for commercial use is
 * prohibited. To republish, to post on servers, to reuse, or to redistribute to lists, requires
 * prior specific permission and/or a fee. Request permission to use from Carolla Development, Inc.
 * by email: acline@carolla.com
 */

package pdc;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import mylib.Constants;

/**
 * Traverse test tree and add test classes found into a test suite, organized by the primary MVP
 * components: PDC, CIV, DMC, and SIC (but not HIC at this time).
 * 
 * @author Alan Cline
 * @version Mar 21, 2016 // original <br>
 */
public class SuiteBuilder
{
  // Error messages
  static private String USAGE_MSG = "USAGE: argument should be root directory of all test files.";
  static private String WRONGARGS_MSG = "Wrong number of arguments given";
  static private String BADDIR_MSG = "Directory given is not a test directory";

  /** Default test suite to be created */
  static private final String SUITE_NAME = "UnitTestSuite.java";
  
  enum Category {
    BASE, PDC, CIV, DMC, SIC
  };

  /** Package statement to insert into suite file */
  private final String PKG_STATEMENT = "package test;\n";

  /** Imports to insert into suite file */
  private final String IMPORTS =
      "import org.junit.runner.RunWith;\n" +
      "import org.junit.runners.Suite;\n" +
      "import test.pdc.TestQAScanner;\n" + 
      "import test.pdc.TestTestTemplate;\n\n";

/** Class header comments, author, and version and definition */
  private final String AUTHOR_VERSION =
      "/**\n * Run all unit tests for the project.\n * \n" +
          " * @author --generated by QA Tool--\n" +
          " * @version %1$tB %1$te, %1$tY \t// original <br>\n */\n";

  /** Opening for test class list */
  private final String TEST_LIST = "@RunWith(Suite.class)\n@Suite.SuiteClasses( {\n";

  /** Closing list and empty test suite class definition */
  private final String CLASS_CLOSING = "}) \n\n public class %s { } \n // end of class";

  /** Test group comment */
  private final String GROUP_CMT = "\t\t/** %s Test Files */";

  /** Root dir for all test files */
  static private File _testRoot;
  
  /** Collection of file names to write into the Test Suite */
  static private ArrayList<String> _filenames;


  // ======================================================================
  // CONSTRUCTOR AND ITS HELPERS
  // ======================================================================

  /** Default constructor */
  public SuiteBuilder()
  {
    _filenames = new ArrayList<String>();
  }

  /** Execute the methods to collect and write the unit suite */
  private void run()
  {
    ArrayList<String> fileList = collectTestFileNames(_testRoot, _testRoot.getPath().length());
    File target = new File(_testRoot.getPath() + Constants.FS + SUITE_NAME);
    writeFile(target, fileList);
  }
  

  // ======================================================================
  // PUBLIC METHODS
  // ======================================================================

  /**
   * Given the root test tree, scan all test files from the test directory downward
   * 
   * @param args[0] contains the test subdir in which to place the test suite
   */
  public static void main(String[] args) throws IllegalArgumentException
  {
    // Guards for invalid argument
    if (args.length != 1) {
      System.err.println(USAGE_MSG);
      throw new IllegalArgumentException(WRONGARGS_MSG);
    }
    _testRoot = new File(args[0]);
    if (!_testRoot.isDirectory()) {
      System.err.println(USAGE_MSG);
      throw new IllegalArgumentException(BADDIR_MSG);
    }
    SuiteBuilder sb = new SuiteBuilder();
    sb.run();
    
    System.out.println(String.format("\n%s files collected", _filenames.size()));
    File suite = new File(_testRoot.getPath() + Constants.FS + SUITE_NAME);
    if (suite.isFile()) {
      System.out.println("Unit Test Suite created at " + suite.getPath());
    } else {
      System.err.println("Unit Test Suite was not created.");
    }
  }


  /**
   * Recursively traverse the root dir structure, collecting test files
   * 
   * @param testDir test directory root, subdir of srcDir
   * @param rootLen length of the original testDir, a constant throughout recursion
   * @return a list of test classes by subdirectory
   */
  public ArrayList<String> collectTestFileNames(File testDir, int rootlen)
  {
    // Retrieve all files and subdirs under dir
    File[] allFiles = testDir.listFiles();
    for (File f : allFiles) {
      // If file is a directory, recurse down one level
      String path = f.getPath();
      String s = path.substring(rootlen+1);
      // System.out.println("\tExamining " + s);
      if (f.isDirectory()) {
        collectTestFileNames(f, rootlen);
      } else {
        // Skip HIC subdir
        if (s.contains("hic")) {
          continue;
        }
        // Include only files that start with Test prefix and end with .java suffix
        String fName = f.getName();
        if (fName.endsWith(".java") && (fName.startsWith("Test"))) {
          _filenames.add(s);
        }
      }
    }
    return _filenames;
  }


  /**
   * Writes a test suite for all test classes found, organized by test subdirectory
   * 
   * @param target  file to become the suite
   * @param fList the list of all test files to add to suite
   * @return the test file written
   */
  public File writeFile(File target, ArrayList<String> fList)
  {
    // Create new output device
    PrintWriter out = null;
    try {
      // Ensure that the target file is created anew
      // target.delete();
      out = new PrintWriter(target);
    } catch (FileNotFoundException e) {
      System.err.println("\twriteFile(): \t" + e.getMessage());
      return null;
    }
  
    // 1. Write the copyright notice into the prototype
    int year = new GregorianCalendar().get(Calendar.YEAR);
    String copyright = String.format(Constants.COPYRIGHT, target.getName(), year);
    out.println(copyright);
  
    // 2. Write the package statement
    out.println(PKG_STATEMENT);
  
    // 3. Write the import statements
    out.println(IMPORTS);
  
    // 4. Write header comment, author, and version
    // Remove the .java extension from the filename
    String className = target.getName();
    int ndx = className.lastIndexOf(".");
    String name = className.substring(0, ndx);
    String version = String.format(AUTHOR_VERSION, new Date(), name);
    out.println(version);
  
    // 5. Write the class definition opening
    out.println(TEST_LIST);
  
    // 6. Replace the .java extension with .class extension for all test filenames
    ArrayList<String> testNames = new ArrayList<String>();
    for (String nm : _filenames) {
      String clsName = nm.replace(".java", ".class,");
      testNames.add(clsName);
    }
    // 6. Write the test class list by group
    writeByGroup(out, testNames);
  
    // 7. Write the class closing brace
    String s = target.getName();
    String clsName = s.substring(0, s.indexOf(".java"));
    out.println(String.format(CLASS_CLOSING, clsName));
  
    out.close();
    return target;
  }


  // ======================================================================
  // PRIVATE METHODS
  // ======================================================================

  /** Group test files names by test subdir, returning each group in its own List */
  private ArrayList<String> returnGroup(Category cat, ArrayList<String> nameList)
  {
    ArrayList<String> group = new ArrayList<String>();
    String prefix = cat.toString().toLowerCase();
    for (String s : nameList) {
      // Check for base tests not in a subdir
      if ((cat == Category.BASE) && (s.startsWith("Test"))) {
        group.add(s);
      } else {
        if (s.startsWith(prefix)) {
          // Remove the subdir prefix
//          String name = s.substring(s.indexOf(Constants.FS) + 1);
          String name = s.substring(s.lastIndexOf(Constants.FS) + 1);
          group.add(name);
        }
      }
    }
    return group;
  }

  
  private void writeByGroup(PrintWriter out, ArrayList<String> fileList)
  {
    ArrayList<String> group = returnGroup(Category.BASE, fileList);
    writeGroup(out, "Base", group);

    group = returnGroup(Category.PDC, fileList);
    writeGroup(out, Category.PDC.toString(), group);

    group = returnGroup(Category.CIV, fileList);
    writeGroup(out, Category.CIV.toString(), group);

    group = returnGroup(Category.DMC, fileList);
    writeGroup(out, Category.DMC.toString(), group);

  }

  /**
   * Write a single named group to the suite
   * 
   * @param out the suite file
   * @param groupName name of the group, from the enum Category
   * @param group list of tests files in this group
   */
  private void writeGroup(PrintWriter out, String groupName, ArrayList<String> group)
  {
    out.println(String.format(GROUP_CMT, groupName));
    for (String nm : group) {
      out.println("\t\t" + nm);
    }
    out.println();
  }


} // end of SuiteBuilder class
