/**
 * TestFileScanner.java Copyright (c) 2017, Alan Cline. All Rights Reserved.
 * 
 * Permission to make digital or hard copies of all or parts of this work for commercial use is
 * prohibited. To republish, to post on servers, to reuse, or to redistribute to lists, requires
 * prior specific permission and/or a fee. Request permission to use from acline@carolla.com.
 */

package test.pdc;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import mylib.MsgCtrl;
import pdc.FileScanner;
import pdc.FileScanner.MockFileScanner;

/**
 * @author --generated by QA Tool--
 * @version April 30, 2017 // original <br>
 */
public class TestFileScanner
{
   private FileScanner _fs;
   private MockFileScanner _mock;
   
   // Set up target for parm (unused)
   private String _path = "/Projects/eChronos/QATool/FileScanner/src/pdc/FileScanner.java";

   /**
    * @throws java.lang.Exception -- general catchall for exceptions not caught by the tests
    */
   @BeforeClass
   public static void setUpBeforeClass() throws Exception
   {}

   /**
    * @throws java.lang.Exception -- general catchall for exceptions not caught by the tests
    */
   @AfterClass
   public static void tearDownAfterClass() throws Exception
   {}

   /**
    * @throws java.lang.Exception -- general catchall for exceptions not caught by the tests
    */
   @Before
   public void setUp() throws Exception
   {
      // Create FileScanner and mock for testing
      _fs = new FileScanner();
      _mock = _fs.new MockFileScanner();
   }

   /**
    * @throws java.lang.Exception -- general catchall for exceptions not caught by the tests
    */
   @After
   public void tearDown() throws Exception
   {
      MsgCtrl.auditMsgsOn(false);
      MsgCtrl.errorMsgsOn(false);
      _fs = null;
      _mock = null;
   }


   // ===============================================================================
   // BEGIN TESTING
   // ===============================================================================

   /**
    * Normal Test: String verifyArgs(String[]) One target file and no other parms
    */
   @Test
   public void testVerifyArgs()
   {
      MsgCtrl.auditMsgsOn(false);
      MsgCtrl.errorMsgsOn(false);
      MsgCtrl.where(this);

      // SETUP Load command line options
      String[] args = new String[1];
      args[0] = _path;

      // RUN
      _mock.verifyArgs(args);

      // VERIFY
      assertFalse(_mock.isVerbose());
      assertFalse(_mock.isFailStubs());
      assertFalse(_mock.isFileEcho());
   }


   /**
    * Normal Test: String verifyArgs(String[]) One target file and -verbose only
    */
   @Test
   public void testVerifyArgs_Verbose()
   {
      MsgCtrl.auditMsgsOn(false);
      MsgCtrl.errorMsgsOn(false);
      MsgCtrl.where(this);

      // SETUP Load command line options
      String[] args = new String[2];
      args[0] = _path;
      args[1] = "-verbose";

      // RUN
      _mock.verifyArgs(args);

      // VERIFY
      assertTrue(_mock.isVerbose());
      assertFalse(_mock.isFailStubs());
      assertFalse(_mock.isFileEcho());
   }

   /**
    * Normal Test: String verifyArgs(String[]) One target file and -fileEcho only
    */
   @Test
   public void testVerifyArgs_FileEcho()
   {
      MsgCtrl.auditMsgsOn(false);
      MsgCtrl.errorMsgsOn(false);
      MsgCtrl.where(this);

      // SETUP Load command line options
      String[] args = new String[2];
      args[0] = _path;
      args[1] = "-fileEcho";

      // RUN
      _mock.verifyArgs(args);

      // VERIFY
      assertFalse(_mock.isVerbose());
      assertFalse(_mock.isFailStubs());
      assertTrue(_mock.isFileEcho());
   }

   /**
    * Normal Test: String verifyArgs(String[]) One target file and -failStubs only
    */
   @Test
   public void testVerifyArgs_FailStubs()
   {
      MsgCtrl.auditMsgsOn(false);
      MsgCtrl.errorMsgsOn(false);
      MsgCtrl.where(this);

      // SETUP Load command line options
      String[] args = new String[4];
      args[0] = _path;
      args[1] = "-fileEcho";
      args[2] = "-failStubs";
      args[3] = "-verbose";

      // RUN
      _mock.verifyArgs(args);

      // VERIFY
      assertTrue(_mock.isVerbose());
      assertTrue(_mock.isFailStubs());
      assertTrue(_mock.isFileEcho());
   }


   /**
    * Normal Test: String verifyArgs(String[]) One target file and all three parms
    */
   @Test
   public void testVerifyArgs_AllParms()
   {
      MsgCtrl.auditMsgsOn(false);
      MsgCtrl.errorMsgsOn(false);
      MsgCtrl.where(this);

      // SETUP Load command line options
      String[] args = new String[2];
      args[0] = _path;
      args[1] = "-failStubs";

      // RUN
      _mock.verifyArgs(args);

      // VERIFY
      assertFalse(_mock.isVerbose());
      assertTrue(_mock.isFailStubs());
      assertFalse(_mock.isFileEcho());
   }


   /**
    * Error Test: String verifyArgs(String[]) -- command line = null 
    */
   @Test
   public void testVerifyArgs_NoCmdLine()
   {
      MsgCtrl.auditMsgsOn(false);
      MsgCtrl.errorMsgsOn(false);
      MsgCtrl.where(this);

      // SETUP Load command line options
      String ERRMSG_NOCMDLINE = "Missing command line for QAFileScan";
      // RUN
      String result = _mock.verifyArgs(null);

      // VERIFY
      assertEquals(ERRMSG_NOCMDLINE, result);
      
      // SETUP Load command line options
      String[] args = new String[0];
      assertEquals(0, args.length);
      // RUN
      result = _mock.verifyArgs(args);
      // VERIFY
      assertEquals(ERRMSG_NOCMDLINE, result);
   }


} 	// end of TestFileScanner.java class
