/** 
 * TestHero.java Copyright (c) 2017, Alan Cline. All Rights Reserved. 
 * 
 * Permission to make digital or hard copies of all or parts of this work for 
 * commercial use is prohibited. To republish, to post on servers, to reuse, 
 * or to redistribute to lists, requires prior specific permission and/or a fee. 
 * Request permission to use from acline@carolla.com. 
 */

package chronos.test.pdc.character;

import static org.junit.Assert.*;

import java.io.File;

import org.junit.After; 
import org.junit.AfterClass; 
import org.junit.Before; 
import org.junit.BeforeClass; 
import org.junit.Test;

import chronos.pdc.character.Hero;
import mylib.MsgCtrl;

/** 
 * @author --generated by QA Tool--
 * @version August 3, 2017    // original <br>
 */
public class TestHero
{
  // A Hero under test
  private Hero _hero;
  
  
	/** 
	 * @throws java.lang.Exception -- general catch-all for exceptions not caught by the tests
 	 */ 
	@BeforeClass
	public static void setUpBeforeClass() throws Exception
	{ }

	/** 
	 * @throws java.lang.Exception -- general catch-all for exceptions not caught by the tests
 	 */ 
	@AfterClass
	public static void tearDownAfterClass() throws Exception
	{ }

	/** 
	 * @throws java.lang.Exception -- general catch-all for exceptions not caught by the tests
 	 */ 
	@Before
	public void setUp() throws Exception
	{
	  _hero = new Hero("Falsoon", "Male", "Brown", "Human");
	  assertNotNull(_hero);
	}

	/** 
	 * @throws java.lang.Exception -- general catch-all for exceptions not caught by the tests
 	 */ 
	@After
	public void tearDown() throws Exception
	{ 
		MsgCtrl.auditMsgsOn(false);
		MsgCtrl.errorMsgsOn(false);
		_hero = null;
	}


// ===============================================================================
//		 BEGIN TESTING
// ===============================================================================

	/**
 	 * @Not.Implemented boolean canUseMagic()
	 */
	@Test
	public void testCanUseMagic()
	{
		MsgCtrl.auditMsgsOn(true);
		MsgCtrl.errorMsgsOn(true);
		MsgCtrl.where(this);

		MsgCtrl.errMsgln("\t\t TEST METHOD NOT YET IMPLEMENTED");
	}


	/**
 	 * @Not.Implemented Inventory getInventory()
	 */
	@Test
	public void testGetInventory()
	{
		MsgCtrl.auditMsgsOn(true);
		MsgCtrl.errorMsgsOn(true);
		MsgCtrl.where(this);

		MsgCtrl.errMsgln("\t\t TEST METHOD NOT YET IMPLEMENTED");
	}


	/**
 	 * @Not.Implemented String getKey()
	 */
	@Test
	public void testGetKey()
	{
		MsgCtrl.auditMsgsOn(true);
		MsgCtrl.errorMsgsOn(true);
		MsgCtrl.where(this);

		MsgCtrl.errMsgln("\t\t TEST METHOD NOT YET IMPLEMENTED");
	}


	/**
 	 * @Not.Implemented List getKlassSkills()
	 */
	@Test
	public void testGetKlassSkills()
	{
		MsgCtrl.auditMsgsOn(true);
		MsgCtrl.errorMsgsOn(true);
		MsgCtrl.where(this);

		MsgCtrl.errMsgln("\t\t TEST METHOD NOT YET IMPLEMENTED");
	}


	/**
 	 * @Not.Implemented String getName()
	 */
	@Test
	public void testGetName()
	{
		MsgCtrl.auditMsgsOn(true);
		MsgCtrl.errorMsgsOn(true);
		MsgCtrl.where(this);

		MsgCtrl.errMsgln("\t\t TEST METHOD NOT YET IMPLEMENTED");
	}


	/**
 	 * @Not.Implemented List getOcpSkills()
	 */
	@Test
	public void testGetOcpSkills()
	{
		MsgCtrl.auditMsgsOn(true);
		MsgCtrl.errorMsgsOn(true);
		MsgCtrl.where(this);

		MsgCtrl.errMsgln("\t\t TEST METHOD NOT YET IMPLEMENTED");
	}


	/**
 	 * @Not.Implemented List getRaceSkills()
	 */
	@Test
	public void testGetRaceSkills()
	{
		MsgCtrl.auditMsgsOn(true);
		MsgCtrl.errorMsgsOn(true);
		MsgCtrl.where(this);

		MsgCtrl.errMsgln("\t\t TEST METHOD NOT YET IMPLEMENTED");
	}


	/**
 	 * @Not.Implemented List getSpellBook()
	 */
	@Test
	public void testGetSpellBook()
	{
		MsgCtrl.auditMsgsOn(true);
		MsgCtrl.errorMsgsOn(true);
		MsgCtrl.where(this);

		MsgCtrl.errMsgln("\t\t TEST METHOD NOT YET IMPLEMENTED");
	}


	/**
 	 * @Not.Implemented int hashCode()
	 */
	@Test
	public void testHashCode()
	{
		MsgCtrl.auditMsgsOn(true);
		MsgCtrl.errorMsgsOn(true);
		MsgCtrl.where(this);

		MsgCtrl.errMsgln("\t\t TEST METHOD NOT YET IMPLEMENTED");
	}


	/**
 	 * @Not.Implemented Map loadAttributes()
	 */
	@Test
	public void testLoadAttributes()
	{
		MsgCtrl.auditMsgsOn(true);
		MsgCtrl.errorMsgsOn(true);
		MsgCtrl.where(this);

		MsgCtrl.errMsgln("\t\t TEST METHOD NOT YET IMPLEMENTED");
	}

	
  /**
   * @Normal.Test boolean save() -- save Hero
   */
  @Test
  public void testSave()
  {
    MsgCtrl.auditMsgsOn(true);
    MsgCtrl.errorMsgsOn(true);
    MsgCtrl.where(this);
    MsgCtrl.errMsgln("\t\t TEST METHOD NOT YET IMPLEMENTED");

    // RUN
    
    // Create a file to get some file stats
//    File regFile = _mock.getRegFile();
//    assertTrue(regFile.exists());
//    MsgCtrl.msgln("\t Dormitory file is size " + regFile.length() + " bytes");
  }


	/**
 	 * @Not.Implemented void setName(String)
	 */
	@Test
	public void testSetName()
	{
		MsgCtrl.auditMsgsOn(true);
		MsgCtrl.errorMsgsOn(true);
		MsgCtrl.where(this);

		MsgCtrl.errMsgln("\t\t TEST METHOD NOT YET IMPLEMENTED");
	}


	/**
 	 * @Not.Implemented String toNamePlate()
	 */
	@Test
	public void testToNamePlate()
	{
		MsgCtrl.auditMsgsOn(true);
		MsgCtrl.errorMsgsOn(true);
		MsgCtrl.where(this);

		MsgCtrl.errMsgln("\t\t TEST METHOD NOT YET IMPLEMENTED");
	}




} 	// end of TestHero.java class
