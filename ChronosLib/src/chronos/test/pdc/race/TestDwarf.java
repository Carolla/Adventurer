/**
 * TestDwarf.java Copyright (c) 2017, Alan Cline. All Rights Reserved.
 * 
 * Permission to make digital or hard copies of all or parts of this work for commercial use is
 * prohibited. To republish, to post on servers, to reuse, or to redistribute to lists, requires
 * prior specific permission and/or a fee. Request permission to use from acline@carolla.com.
 */

package chronos.test.pdc.race;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import chronos.pdc.character.Gender;
import chronos.pdc.character.TraitList;
import chronos.pdc.character.TraitList.PrimeTraits;
import chronos.pdc.race.Dwarf;
import mylib.MsgCtrl;
import mylib.pdc.Utilities;

/**
 * @author --generated by QA Tool--
 * @version September 16, 2017 // original <br>
 */
public class TestDwarf
{
  private Dwarf _him;
  private Dwarf _her;

  // Generate a bunch of values in a loop for stat calculation
  private int NBR_LOOPS = 10000;
  // Storage of generated values
  private int[] _values = new int[NBR_LOOPS];


  /**
   * @throws java.lang.Exception -- general catch-all for exceptions not caught by the tests
   */
  @BeforeClass
  public static void setUpBeforeClass() throws Exception
  {}

  /**
   * @throws java.lang.Exception -- general catch-all for exceptions not caught by the tests
   */
  @AfterClass
  public static void tearDownAfterClass() throws Exception
  {}

  /**
   * @throws java.lang.Exception -- general catch-all for exceptions not caught by the tests
   */
  @Before
  public void setUp() throws Exception
  {
    _him = new Dwarf(new Gender("male"), "black");
    assertNotNull(_him);
    _her = new Dwarf(new Gender("female"), "brown");
    assertNotNull(_her);
    // Create storage for stats
    _values = new int[NBR_LOOPS];
  }

  /**
   * @throws java.lang.Exception -- general catch-all for exceptions not caught by the tests
   */
  @After
  public void tearDown() throws Exception
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);

    _values = null;
    _her = null;
    _him = null;
  }


  // ===============================================================================
  // BEGIN TESTING
  // ===============================================================================

  /**
   * @Normal.Test void adjustTraitsForRace(TraitList) -- Dwarves are CON+1, CHR-1; adjustments for
   *              gender are not included
   */
  @Test
  public void testAdjustTraitsForRace()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
    MsgCtrl.where(this);

    // Save the original TraitList to an array for later comparison
    // STR, INT, WIS, CON, DEX, CHR
    TraitList traits = new TraitList();
    int[] original = traits.toArray();

    // Adjust traits: male Dwarf = CON+1, CHR-1
    _him.adjustTraitsForRace(traits);
    assertEquals(original[0], traits.getTrait(PrimeTraits.STR));
    assertEquals(original[1], traits.getTrait(PrimeTraits.INT));
    assertEquals(original[2], traits.getTrait(PrimeTraits.WIS));
    assertEquals(original[3] + 1, traits.getTrait(PrimeTraits.CON));
    assertEquals(original[4], traits.getTrait(PrimeTraits.DEX));
    assertEquals(original[5] - 1, traits.getTrait(PrimeTraits.CHR));
  }


  /**
   * @Normal.Test int calcHeight() -- random selection of gender-specific heights
   */
  @Test
  public void testCalcHeight()
  {
    MsgCtrl.auditMsgsOn(true);
    MsgCtrl.errorMsgsOn(true);
    MsgCtrl.where(this);
    
    int maleMin = 49;
    int maleMax = 59;
    double expMaleAvg = (maleMin + maleMax) / 2.0;
            
    // Height range for males [49, 59]
    // Generate a number of weights to check central tendency
    MsgCtrl.msg("\t Expected male height in inches [ " + maleMin + ", " + maleMax + "];");
    MsgCtrl.msgln("\t Expected Average = " + expMaleAvg);
    for (int k = 0; k < NBR_LOOPS; k++) {
      _values[k] = _him.calcHeight();
      assertTrue((_values[k] >= maleMin) && (_values[k] <= maleMax));
    }
    double[] results = Utilities.getStats(_values);
    double avg = results[0];
    int min = (int) results[1];
    int max = (int) results[2];
    MsgCtrl.msgln("\t [Min, Max] = [" + min + ", " + max + "]; Average = " + avg);
    assertEquals(expMaleAvg, results[0], 0.5);
    assertEquals(maleMin, (int) results[1]);
    assertEquals(maleMax, (int) results[2]);
    
    // Height range for females = 90% of males: [44, 53]
    int femaleMin = (int) (Math.round(0.90 * maleMin));
    int femaleMax = (int) (Math.round(0.90 * maleMax));
    double expFemaleAvg = (femaleMin + femaleMax) / 2.0;
    MsgCtrl.msg("\t Expected female height in inches [ " + femaleMin + ", " + femaleMax + "];");
    MsgCtrl.msgln("\t Expected Average = " + expFemaleAvg);
    for (int k = 0; k < NBR_LOOPS; k++) {
      _values[k] = _her.calcHeight();
      assertTrue((_values[k] >= femaleMin) && (_values[k] <= femaleMax));
    }
    results = Utilities.getStats(_values);
    avg = results[0];
    min = (int) results[1];
    max = (int) results[2];
    MsgCtrl.msgln("\t [Min, Max] = [" + min + ", " + max + "]; Average = " + avg);
    assertEquals(expFemaleAvg, results[0], 0.5);
    assertEquals(femaleMin, (int) results[1]);
    assertEquals(femaleMax, (int) results[2]);
  }


  /**
   * @Normal.Test int calcWeight() -- random selection of gender-specific weights
   */
  @Test
  public void testCalcWeight()
  {
    MsgCtrl.auditMsgsOn(true);
    MsgCtrl.errorMsgsOn(true);
    MsgCtrl.where(this);
    
    int maleMin = 110;
    int maleMax = 190;
    double expMaleAvg = (maleMin + maleMax) / 2.0;
            
    
    // MALE TEST: Weight range for males [110, 190]
    // Generate a number of weights to check central tendency
    MsgCtrl.msg("\t Expected male weight in inches [ " + maleMin + ", " + maleMax + "];");
    MsgCtrl.msgln("\t Expected Average = " + expMaleAvg);
    for (int k = 0; k < NBR_LOOPS; k++) {
      _values[k] = _him.calcWeight();
      assertTrue((_values[k] >= maleMin) && (_values[k] <= maleMax));
    }
    double[] results = Utilities.getStats(_values);
    double avg = results[0];
    double min = results[1];
    double max = results[2];
    MsgCtrl.msgln("\t [Min, Max] = [" + min + ", " + max + "]; Average = " + avg);
    assertEquals(expMaleAvg, results[0], 0.5);
    assertEquals(maleMin, (int) results[1], 1.0);
    assertEquals(maleMax, (int) results[2], 1.0);
    
    // FEMALE TEST: Weight range for females = 90% of males: [99, 171]
    int femaleMin = (int) (Math.round(0.90 * maleMin));
    int femaleMax = (int) (Math.round(0.90 * maleMax));
    double expFemaleAvg = (femaleMin + femaleMax) / 2.0;
    MsgCtrl.msg("\t Expected female Weight in inches [ " + femaleMin + ", " + femaleMax + "];");
    MsgCtrl.msgln("\t Expected Average = " + expFemaleAvg);
    for (int k = 0; k < NBR_LOOPS; k++) {
      _values[k] = _her.calcWeight();
      assertTrue((_values[k] >= femaleMin) && (_values[k] <= femaleMax));
    }
    results = Utilities.getStats(_values);
    avg = results[0];
    min = results[1];
    max = results[2];
    MsgCtrl.msgln("\t [Min, Max] = [" + min + ", " + max + "]; Average = " + avg);
    assertEquals(expFemaleAvg, results[0], 0.5);
    assertEquals(femaleMin, (int) results[1], 1.0);
    assertEquals(femaleMax, (int) results[2], 1.0);
  }


} // end of TestDwarf.java class
