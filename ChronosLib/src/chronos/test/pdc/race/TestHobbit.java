/**
 * TestHobbit.java Copyright (c) 2017, Alan Cline. All Rights Reserved.
 * 
 * Permission to make digital or hard copies of all or parts of this work for commercial use is
 * prohibited. To republish, to post on servers, to reuse, or to redistribute to lists, requires
 * prior specific permission and/or a fee. Request permission to use from acline@carolla.com.
 */

package chronos.test.pdc.race;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.util.List;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import chronos.pdc.character.Gender;
import chronos.pdc.character.TraitList;
import chronos.pdc.character.TraitList.PrimeTraits;
import chronos.pdc.race.Hobbit;
import chronos.pdc.race.Race.MockRace;
import mylib.MsgCtrl;

/**
 * @author --generated by QA Tool--
 * @version August 17, 2017 // original <br>
 */
public class TestHobbit
{
  private Hobbit _him;
  private Hobbit _her;
  private MockRace _mockHim;
  private MockRace _mockHer;

  /**
   * @throws java.lang.Exception -- general catch-all for exceptions not caught by the tests
   */
  @BeforeClass
  public static void setUpBeforeClass() throws Exception
  {}

  /**
   * @throws java.lang.Exception -- general catch-all for exceptions not caught by the tests
   */
  @AfterClass
  public static void tearDownAfterClass() throws Exception
  {}

  /**
   * @throws java.lang.Exception -- general catch-all for exceptions not caught by the tests
   */
  @Before
  public void setUp() throws Exception
  {
    _him = new Hobbit(new Gender("male"), "black");
    assertNotNull(_him);
    _mockHim = _him.new MockRace();
    assertNotNull(_mockHim);

    _her = new Hobbit(new Gender("female"), "brown");
    assertNotNull(_her);
    _mockHer = _her.new MockRace();
    assertNotNull(_mockHer);
  }

  /**
   * @throws java.lang.Exception -- general catch-all for exceptions not caught by the tests
   */
  @After
  public void tearDown() throws Exception
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);

    _mockHer = null;
    _her = null;
    _mockHim = null;
    _him = null;
  }


  // ===============================================================================
  // BEGIN TESTING
  // ===============================================================================

  /**
   * @Normal.Test Hobbit(Gender gender, String hairColor) -- verify ctor
   */
  @Test
  public void testCtor()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
    MsgCtrl.where(this);

    String[] hobbitSkills = {
        "Infravision (30')",
        "Resistance to Poison: Special Save includes HPMod and Magic Attack Mod",
        "Detect slopes in underground passages (75%)",
        "Determine direction of underground travel (50%)"
    };

    // VERIFY male hobbit
    // Get fields set during male constructor: race name ("Hobbit"), race lang ("Tolkeen"), skills
    // (listed above), gender ("male), and hair color ("black")
    assertEquals("Hobbit", _mockHim.getRaceName());
    assertEquals("Tolkeen", _mockHim.getRaceLang()); // Hobbits have race language Tolkeen

    List<String> skills = _him.getSkills();
    assertEquals(hobbitSkills.length, skills.size());
    for (int k = 0; k < skills.size(); k++) {
      MsgCtrl.msgln("\t Male Hobbit skills: " + skills.get(k));
      assertEquals(hobbitSkills[k], skills.get(k));
    }
    assertEquals("Male", _him.getGender());
    assertEquals("black", _mockHim.getHairColor());

    // VERIFY female hobbit
    // Get fields set during male constructor: race name ("Hobbit"), race lang ("Tolkeen"), skills
    // (listed above), gender ("female), and hair color ("brown")
    assertEquals("Hobbit", _mockHer.getRaceName());
    assertEquals("Tolkeen", _mockHer.getRaceLang()); // Hobbits have race language Tolkeen

    skills = _her.getSkills();
    assertEquals(hobbitSkills.length, skills.size());
    for (int k = 0; k < skills.size(); k++) {
      MsgCtrl.msgln("\t Female Hobbit skills: " + skills.get(k));
      assertEquals(hobbitSkills[k], skills.get(k));
    }
    assertEquals("Female", _her.getGender());
    assertEquals("brown", _mockHer.getHairColor());
  }


  /**
   * @Normal.Test TraitList adjustTraitsForRace(TraitList traits) -- STR-1, CON+1, DEX+1
   */
  @Test
  public void testAdjustTraitsForRace()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
    MsgCtrl.where(this);

    // SETUP Provide some base traits to be adjusted
    // Dump the prime traits' names for easier processing
    PrimeTraits[] traitName = PrimeTraits.values();

    // Save the original traitlist to another object for later comparison
    TraitList baseTraits = new TraitList();
    int[] original = baseTraits.toArray();

    // VERIFY STR-1, CON+1, DEX+1
    _him.adjustTraitsForRace(baseTraits);
    for (int k = 0; k < 6; k++) {
      int beforeTrait = original[k];
      int afterTrait = baseTraits.getTrait(traitName[k]);
      if (traitName[k] == PrimeTraits.STR) {
        assertEquals(afterTrait, beforeTrait - 1);
      } else if (traitName[k] == PrimeTraits.CON) {
        assertEquals(afterTrait, beforeTrait + 1);
      } else if (traitName[k] == PrimeTraits.DEX) {
        assertEquals(afterTrait, beforeTrait + 1);
      } else {
        assertEquals(beforeTrait, afterTrait);
      }
    }
    // VERIFY STR-1, CON+1, DEX+1
    baseTraits = new TraitList();
    original = baseTraits.toArray();
    _her.adjustTraitsForRace(baseTraits);
    for (int k = 0; k < 6; k++) {
      int beforeTrait = original[k];
      int afterTrait = baseTraits.getTrait(traitName[k]);
      if (traitName[k] == PrimeTraits.STR) {
        assertEquals(afterTrait, beforeTrait - 1);
      } else if (traitName[k] == PrimeTraits.CON) {
        assertEquals(afterTrait, beforeTrait + 1);
      } else if (traitName[k] == PrimeTraits.DEX) {
        assertEquals(afterTrait, beforeTrait + 1);
      } else {
        assertEquals(beforeTrait, afterTrait);
      }
    }
  }


  /**
   * @Normal.Test int calcHeight(int low, String range) -- verify that height is randomly
   *              distributed across range from the low value. Range must be normal distribution of
   *              order 2dN-2.
   */
  @Test
  public void testCalcHeight()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
    MsgCtrl.where(this);

    // int HT_LOW = 38; // male range [38, 46]; female [34, 42]
    // String HT_RANGE_DICE = "2d5-2"; // varying height = 0 - 8 in
    int[] bin = {38, 41, 44, 46};

    // RUN
    int nbrLoops = 1000;
    double avg = _mockHim.calcHeightWithBins(_him, bin, nbrLoops);

    // Verify Average should be midway between all values
    assertEquals(42.0, avg, 1.0);
    MsgCtrl.msgln("\t Average male height = " + avg);
  }


  /**
   * @Normal.Test int calcHeight(int low, String range) -- verify that height is randomly
   *              distributed across range from the low value. Range must be normal distribution of
   *              order 2dN-2.
   */
  @Test
  public void testCalcHeight_Female()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
    MsgCtrl.where(this);

    // int HT_LOW = 38; // male range [38, 46]; female [34, 42]
    // String HT_RANGE_DICE = "2d5-2"; // varying height = 0 - 8 in
    int[] bin = {34, 36, 39, 42};

    // RUN
    int nbrLoops = 1000;
    double avg = _mockHer.calcHeightWithBins(_her, bin, nbrLoops);

    // Verify Average should be midway between all values
    MsgCtrl.msgln("\t Average female height = " + avg);
    assertEquals(38.0, avg, 1.0);
  }


  /**
   * @Normal.Test int calcWeight(int low, String range) -- verify that height is randomly
   *              distributed across range from the low value. Range must be normal distribution of
   *              order 2dN-2.
   */
  @Test
  public void testCalcWeight()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
    MsgCtrl.where(this);

    // int WT_LOW = 70; // male range [70, 110]; female [63, 103]
    // String WT_RANGE_DICE = "2d3-2"; // times 10: varying weight = 0 - 40 lb
    int[] bin = {70, 83, 97, 110};

    // RUN
    int nbrLoops = 1000;
    double avg = _mockHim.calcWeightWithBins(_him, bin, nbrLoops);

    // Verify Average should be midway between all values
    MsgCtrl.msgln("\t Average male weight = " + avg);
    assertEquals(90.0, avg, 1.0);
  }


  /**
   * @Normal.Test int calcWeight(int low, String range) -- verify that height is randomly
   *              distributed across range from the low value. Range must be normal distribution of
   *              order 2dN-2.
   */
  @Test
  public void testCalcWeight_Female()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
    MsgCtrl.where(this);

    // int WT_LOW = 70; // male range [70, 110]; female [63, 103]
    // String WT_RANGE_DICE = "2d3-2"; // times 10: varying weight = 0 - 40 lb
    int[] bin = {63, 76, 90, 103};

    // RUN
    int nbrLoops = 1000;
    double avg = _mockHer.calcWeightWithBins(_her, bin, nbrLoops);

    // Verify Average should be midway between all values
    MsgCtrl.msgln("\t Average female weight = " + avg);
    assertEquals(83.0, avg, 1.0);
  }

  
  // ===============================================================================
  // PRIVATE HELPERS
  // ===============================================================================

//  /**
//   * Count the number of values with 1/3 of the distribution
//   * 
//   * @param obj Hobbit that contains the method to call
//   * @param bin top range of low, mid, high bins
//   * @param count number of times to execute the method and find the average
//   * @return average of all values calculated by the object's method
//   */
////  private double calcHeightWithBins(Hobbit hob, int[] bin, int count)
//  private double calcHeightWithBins(Race race, int[] bin, int count)
//  {
//    int sum = 0;
//    int lowCnt = 0;
//    int midCnt = 0;
//    int hiCnt = 0;
//    int cntSum = 0;
//    // Range runs from 1 to 10
//    for (int k = 0; k < count; k++) {
//      int dp = race.calcHeight();
//      lowCnt += ((dp >= bin[0]) && (dp < bin[1])) ? 1 : 0;
//      midCnt += ((dp >= bin[1]) && (dp < bin[2])) ? 1 : 0;
//      hiCnt += ((dp >= bin[2]) && (dp <= bin[3])) ? 1 : 0;
//      assertTrue((dp >= bin[0]) && (dp <= bin[3]));
//      sum += dp;
//      cntSum = lowCnt + midCnt + hiCnt;
//    }
//    // Tally bins
//    MsgCtrl.msgln("\t " + lowCnt + " low count values");
//    MsgCtrl.msgln("\t " + midCnt + " mid count values");
//    MsgCtrl.msgln("\t " + hiCnt + " high count values");
//    MsgCtrl.msgln("\t " + cntSum + " numbers accounted for");
//    // Average should be midway between all values
//    double avg = sum / count;
//    return avg;
//  }

  

} // end of TestHobbit.java class
