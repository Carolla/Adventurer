/**
 * TestHuman.java Copyright (c) 2017, Alan Cline. All Rights Reserved.
 * 
 * Permission to make digital or hard copies of all or parts of this work for commercial use is
 * prohibited. To republish, to post on servers, to reuse, or to redistribute to lists, requires
 * prior specific permission and/or a fee. Request permission to use from acline@carolla.com.
 */

package chronos.test.pdc.race;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import java.util.List;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import chronos.pdc.character.Gender;
import chronos.pdc.character.TraitList;
import chronos.pdc.character.TraitList.PrimeTraits;
import chronos.pdc.race.Human;
import chronos.pdc.race.Human.MockHuman;
import mylib.MsgCtrl;

/**
 * @author --generated by QA Tool--
 * @version August 15, 2017 // original <br>
 */
public class TestHuman
{
  private Human _him;
  private MockHuman _mockHim;
  private Human _her;
  private MockHuman _mockHer;

  /**
   * @throws java.lang.Exception -- general catch-all for exceptions not caught by the tests
   */
  @BeforeClass
  public static void setUpBeforeClass() throws Exception
  {}

  /**
   * @throws java.lang.Exception -- general catch-all for exceptions not caught by the tests
   */
  @AfterClass
  public static void tearDownAfterClass() throws Exception
  {}

  /**
   * @throws java.lang.Exception -- general catch-all for exceptions not caught by the tests
   */
  @Before
  public void setUp() throws Exception
  {
    _him = new Human(new Gender("male"), "black");
    assertNotNull(_him);
    _mockHim = _him.new MockHuman();
    assertNotNull(_mockHim);

    _her = new Human(new Gender("female"), "blonde");
    assertNotNull(_her);
    _mockHer = _her.new MockHuman();
    assertNotNull(_mockHer);
  }

  /**
   * @throws java.lang.Exception -- general catch-all for exceptions not caught by the tests
   */
  @After
  public void tearDown() throws Exception
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);

    _mockHer = null;
    _her = null;
    _mockHim = null;
    _him = null;
  }


  // ===============================================================================
  // BEGIN TESTING
  // ===============================================================================

  /**
   * @Normal.Test Human(Gender gender, String hairColor) -- verify ctor
   */
  @Test
  public void testCtor()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
    MsgCtrl.where(this);

    // Get fields set during male constructor: race name ("Human"), race lang (null), skills
    // ("None"), gender ("male), and hair color ("black")
    assertEquals("Human", _mockHim.getRaceName());
    assertNull(_mockHim.getRaceLang()); // Humans do not have a race language
    List<String> skills = _him.getSkills(); // Humans do not have race-specific skills
    assertEquals(1, skills.size());
    assertEquals("None", skills.get(0));
    assertEquals("Male", _him.getGender());
    assertEquals("black", _mockHim.getHairColor());

    // Get fields set during female constructor: race name ("Human"), race lang (null), skills
    // ("None"), gender ("female), and hair color ("blonde")
    assertEquals("Human", _mockHer.getRaceName());
    assertNull(_mockHer.getRaceLang()); // Humans do not have a race language
    skills = _her.getSkills(); // Humans do not have race-specific skills
    assertEquals(1, skills.size());
    assertEquals("None", skills.get(0));
    assertEquals("Female", _her.getGender());
    assertEquals("blonde", _mockHer.getHairColor());
  }


  /**
   * @Not.Needed TraitList adjustTraitsForRace(TraitList traits) -- wrapper; actual test is in
   *             {@code TraitList setTraitLimits(TraitList traits)}
   */
  @Test
  public void testAdjustTraitsForRace()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
    MsgCtrl.where(this);
    MsgCtrl.msgln(MsgCtrl.NOTEST + MsgCtrl.WRAPPER);
  }


  /**
   * @Normal.Test int calcHeight(int low, String range) -- verify that height is randomly
   *              distributed across range from the low value. Range must be normal distribution of
   *              order 2dN-2.
   */
  @Test
  public void testCalcHeight()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
    MsgCtrl.where(this);

    // Height range: male [60, 78]; female [53, 71];
    // String HT_RANGE_DICE = "2d10-2"; // varying height = 0 - 18 in
    // RUN
    int COUNT = 10000;
    int sum = 0;
    int lowCnt = 0;
    int midCnt = 0;
    int hiCnt = 0;
    int cntSum = 0;
    // Range runs from 1 to 10
    for (int k = 0; k < COUNT; k++) {
      int height = _him.calcHeight();
      // Print every 10th value
      lowCnt += ((height >= 60) && (height <= 65)) ? 1 : 0;
      midCnt += ((height >= 66) && (height <= 72)) ? 1 : 0;
      hiCnt += ((height >= 73) && (height <= 78)) ? 1 : 0;
      assertTrue((height >= 60) && (height <= 78));
      sum += height;
      cntSum = lowCnt + midCnt + hiCnt;
    }
    // Tally bins
    MsgCtrl.msgln("\t " + lowCnt + " low count values");
    MsgCtrl.msgln("\t " + midCnt + " mid count values");
    MsgCtrl.msgln("\t " + hiCnt + " high count values");
    MsgCtrl.msgln("\t " + cntSum + " numbers accounted for");
    // Average should be midway between all values
    double avg = sum / COUNT;
    assertEquals(69.0, avg, 1.0);
  }


  /**
   * @Normal.Test int calcHeight(int low, String range) -- verify that height is randomly
   *              distributed across range from the low value. Range must be normal distribution of
   *              order 2dN-2. Females are 90% as tall as males.
   */
  @Test
  public void testCalcHeight_Female()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
    MsgCtrl.where(this);

    // Height range: male [60, 78]; female [54, 72];
    // Females are adjusted by the calcWeight() method

    // RUN
    int COUNT = 10000;
    int sum = 0;
    int lowCnt = 0;
    int midCnt = 0;
    int hiCnt = 0;
    int cntSum = 0;
    // Range runs from 1 to 10
    for (int k = 0; k < COUNT; k++) {
      int height = _her.calcHeight();
      // Print every 10th value
      lowCnt += ((height >= 54) && (height <= 59)) ? 1 : 0;
      midCnt += ((height >= 60) && (height <= 65)) ? 1 : 0;
      hiCnt += ((height >= 66) && (height <= 72)) ? 1 : 0;
      assertTrue((height >= 54) && (height <= 72));
      sum += height;
      cntSum = lowCnt + midCnt + hiCnt;
    }
    // Tally bins
    MsgCtrl.msgln("\t " + lowCnt + " low count values");
    MsgCtrl.msgln("\t " + midCnt + " mid count values");
    MsgCtrl.msgln("\t " + hiCnt + " high count values");
    MsgCtrl.msgln("\t " + cntSum + " numbers accounted for");
    // Average should be midway between all values
    double avg = sum / COUNT;
    assertEquals(63.0, avg, 1.0);
  }


  /**
   * @Normal.Test int calcWeight(int low, String range) -- verify that weight is randomly
   *              distributed across range from the low value. Range must be normal distribution of
   *              order 2dN-2.
   */
  @Test
  public void testCalcWeight()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
    MsgCtrl.where(this);

    // Weight range: male [130, 230]; female [117, 217]
    // WT_RANGE_DICE = "2d6-2" * 10; // varying weight = 0 - 100 lb

    // RUN
    int COUNT = 10000;
    int sum = 0;
    int lowCnt = 0;
    int midCnt = 0;
    int hiCnt = 0;
    int cntSum = 0;
    // Range runs from 1 to 10
    for (int k = 0; k < COUNT; k++) {
      int weight = _him.calcWeight();
      // Print every 10th value
      lowCnt += ((weight >= 130) && (weight <= 164)) ? 1 : 0;
      midCnt += ((weight >= 165) && (weight <= 198)) ? 1 : 0;
      hiCnt += ((weight >= 199) && (weight <= 230)) ? 1 : 0;
      assertTrue((weight >= 130) && (weight <= 230));
      sum += weight;
      cntSum = lowCnt + midCnt + hiCnt;
    }
    // Tally bins
    MsgCtrl.msgln("\t " + lowCnt + " low count values");
    MsgCtrl.msgln("\t " + midCnt + " mid count values");
    MsgCtrl.msgln("\t " + hiCnt + " high count values");
    MsgCtrl.msgln("\t " + cntSum + " numbers accounted for");
    // Average should be midway between all values
    double avg = sum / COUNT;
    assertEquals(180.0, avg, 1.0);
  }


  /**
   * @Normal.Test int calcWeight(int low, String range) -- verify that weight is randomly
   *              distributed across range from the low value. Range must be normal distribution of
   *              order 2dN-2. Females are 90% as tall as males.
   */
  @Test
  public void testCalcWeight_Female()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
    MsgCtrl.where(this);

    // Weight range: male [130, 230]; female [117, 217]
    // WT_RANGE_DICE = "2d6-2" * 10; // varying weight = 0 - 100 lb

    // RUN
    int COUNT = 10000;
    int sum = 0;
    int lowCnt = 0;
    int midCnt = 0;
    int hiCnt = 0;
    int cntSum = 0;
    // Range runs from 1 to 10
    for (int k = 0; k < COUNT; k++) {
      int weight = _her.calcWeight();
      // Print every 10th value
      lowCnt += ((weight >= 117) && (weight <= 151)) ? 1 : 0;
      midCnt += ((weight >= 152) && (weight <= 185)) ? 1 : 0;
      hiCnt += ((weight >= 186) && (weight <= 217)) ? 1 : 0;
      assertTrue((weight >= 117) && (weight <= 217));
      sum += weight;
      cntSum = lowCnt + midCnt + hiCnt;
    }
    // Tally bins
    MsgCtrl.msgln("\t " + lowCnt + " low count values");
    MsgCtrl.msgln("\t " + midCnt + " mid count values");
    MsgCtrl.msgln("\t " + hiCnt + " high count values");
    MsgCtrl.msgln("\t " + cntSum + " numbers accounted for");
    // Average should be midway between all values
    double avg = sum / COUNT;
    assertEquals(167.0, avg, 1.0);
  }


  /**
   * @Normal.Test TraitList setTraitLimits(TraitList traits) -- verify bounded traits
   */
  @Test
  public void testSetTraitLimits()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
    MsgCtrl.where(this);

    // SETUP Racial limits for a male Human for the traits SIWCDCh */
    int[] MALE_MINLIMIT = {8, 8, 8, 8, 8, 8};
    int[] MALE_MAXLIMIT = {18, 18, 18, 18, 18, 18};
    double[] expAvg = {12.5, 12.5, 12.5, 12.5, 12.5, 12.5};
    int[] accum = {0, 0, 0, 0, 0, 0};
    int[] traitVal = {0, 0, 0, 0, 0, 0};

    // Dump the prime traits' names for easier processing
    PrimeTraits[] traitName = PrimeTraits.values();

    int COUNT = 1000;

    // VERIFY that 100 Human males have a good random distribution of male traits
    assertTrue(_him.getGender().equals("Male"));
    for (int k = 0; k < COUNT; k++) {
      TraitList traits = _him.setTraitLimits(new TraitList());
      for (int p = 0; p < 6; p++) {
        traitVal[p] = traits.getTrait(traitName[p]);
        // MsgCtrl.msg("\t " + traitName[p] + " = " + traitVal[p]);
        assertTrue((traitVal[p] >= MALE_MINLIMIT[p]) && (traitVal[p] <= MALE_MAXLIMIT[p]));
        accum[p] += traitVal[p];
      }
//      MsgCtrl.msgln("\n");
    }
    // Verify that each accum slot holds the average
    MsgCtrl.msgln("\t Average for " + COUNT + " trait rolls");
    for (int m = 0; m < 6; m++) {
      double avg = (double) accum[m] / COUNT;
      MsgCtrl.msgln("\t Average " + traitName[m] + " = " + avg);
      assertEquals(expAvg[m], avg, 0.5);
    }

  }


  /**
   * @Normal.Test TraitList setTraitLimits(TraitList traits) -- verify bounded traits
   */
  @Test
  public void testSetTraitLimits_Female()
  {
    MsgCtrl.auditMsgsOn(true);
    MsgCtrl.errorMsgsOn(true);
    MsgCtrl.where(this);

    // SETUP Racial limits for a male Human for the traits SIWCDCh */
    /** Female limits after adjustments from the male: STR-1, CON+1, CHR+1 */
    int[] FEMALE_MINLIMIT = {7, 8, 8, 9, 8, 9};
    int[] FEMALE_MAXLIMIT = {17, 18, 18, 19, 18, 19};
    double[] expAvg = {11.5, 12.5, 12.5, 13.5, 12.5, 13.5};
    int[] accum = {0, 0, 0, 0, 0, 0};
    int[] traitVal = {0, 0, 0, 0, 0, 0};

    // Dump the prime traits' names for easier processing
    PrimeTraits[] traitName = PrimeTraits.values();

    int COUNT = 1000;

    // VERIFY that 100 Human males have a good random distribution of male traits
    assertTrue(_her.getGender().equals("Female"));
    for (int k = 0; k < COUNT; k++) {
      TraitList traits = _her.setTraitLimits(new TraitList());
      for (int p = 0; p < 6; p++) {
        traitVal[p] = traits.getTrait(traitName[p]);
        // MsgCtrl.msg("\t " + traitName[p] + " = " + traitVal[p]);
        //assertTrue((traitVal[p] >= FEMALE_MINLIMIT[p]) && (traitVal[p] <= FEMALE_MAXLIMIT[p]));
        accum[p] += traitVal[p];
      }
//      MsgCtrl.msgln("\n");
    }
    // Verify that each accum slot holds the average
    MsgCtrl.msgln("\t Average for " + COUNT + " trait rolls");
    for (int m = 0; m < 6; m++) {
      double avg = (double) accum[m] / COUNT;
      MsgCtrl.msgln("\t Average " + traitName[m] + " = " + avg);
      // assertEquals(expAvg[m], avg, 0.5);
    }

  }

} // end of TestHuman.java class
