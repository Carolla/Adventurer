/**
 * TestHuman.java Copyright (c) 2017, Alan Cline. All Rights Reserved.
 * 
 * Permission to make digital or hard copies of all or parts of this work for commercial use is
 * prohibited. To republish, to post on servers, to reuse, or to redistribute to lists, requires
 * prior specific permission and/or a fee. Request permission to use from acline@carolla.com.
 */

package chronos.test.pdc.race;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import java.util.List;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import chronos.pdc.character.Gender;
import chronos.pdc.character.TraitList;
import chronos.pdc.character.TraitList.PrimeTraits;
import chronos.pdc.race.Human;
import chronos.pdc.race.Race.MockRace;
import mylib.MsgCtrl;

/**
 * @author --generated by QA Tool--
 * @version August 15, 2017 // original <br>
 */
public class TestHuman
{
  private Human _him;
  private MockRace _mockHim;
  private Human _her;
  private MockRace _mockHer;

  // The number of samples to take for verification (not for stats which uses much larger numbers)
  private int NBR_LOOPS = 100;

  /**
   * @throws java.lang.Exception -- general catch-all for exceptions not caught by the tests
   */
  @BeforeClass
  public static void setUpBeforeClass() throws Exception
  {}

  /**
   * @throws java.lang.Exception -- general catch-all for exceptions not caught by the tests
   */
  @AfterClass
  public static void tearDownAfterClass() throws Exception
  {}

  /**
   * @throws java.lang.Exception -- general catch-all for exceptions not caught by the tests
   */
  @Before
  public void setUp() throws Exception
  {
    _him = new Human(new Gender("male"), "black");
    assertNotNull(_him);
    _mockHim = _him.new MockRace();
    assertNotNull(_mockHim);

    _her = new Human(new Gender("female"), "blonde");
    assertNotNull(_her);
    _mockHer = _her.new MockRace();
    assertNotNull(_mockHer);
  }

  /**
   * @throws java.lang.Exception -- general catch-all for exceptions not caught by the tests
   */
  @After
  public void tearDown() throws Exception
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);

    _mockHer = null;
    _her = null;
    _mockHim = null;
    _him = null;
  }


  // ===============================================================================
  // BEGIN TESTING
  // ===============================================================================

  /**
   * @Normal.Test Human(Gender gender, String hairColor) -- verify ctor
   */
  @Test
  public void testCtor()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
    MsgCtrl.where(this);

    // Get fields set during male constructor: race name ("Human"), race lang (null), skills
    // ("None"), gender ("male), and hair color ("black")
    assertEquals("Human", _mockHim.getRaceName());
    assertNull(_mockHim.getRaceLang()); // Humans do not have a race language
    List<String> skills = _him.getSkills(); // Humans do not have race-specific skills
    assertEquals(1, skills.size());
    assertEquals("None", skills.get(0));
    assertEquals("Male", _him.getGender());
    assertEquals("black", _mockHim.getHairColor());

    // Get fields set during female constructor: race name ("Human"), race lang (null), skills
    // ("None"), gender ("female), and hair color ("blonde")
    assertEquals("Human", _mockHer.getRaceName());
    assertNull(_mockHer.getRaceLang()); // Humans do not have a race language
    skills = _her.getSkills(); // Humans do not have race-specific skills
    assertEquals(1, skills.size());
    assertEquals("None", skills.get(0));
    assertEquals("Female", _her.getGender());
    assertEquals("blonde", _mockHer.getHairColor());
  }


  /**
   * @Normal.Test TraitList adjustTraitsForRace(TraitList traits) -- no adjustments for Race, before
   *              gender adjustments. Not actually needed except serves as examplar for non-human
   *              race, where test is needed
   */
  @Test
  public void testAdjustTraitsForRace()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
    MsgCtrl.where(this);

    // SETUP Provide some base traits to be adjusted
    // Dump the prime traits' names for easier processing
    PrimeTraits[] traitName = PrimeTraits.values();

    // Save the original traitlist to another object for later comparison
    TraitList baseTraits = new TraitList();
    int[] original = baseTraits.toArray();

    // VERIFY No trait changes
    _him.adjustTraitsForRace(baseTraits);
    for (int k = 0; k < 6; k++) {
      int beforeTrait = original[k];
      int afterTrait = baseTraits.getTrait(traitName[k]);
      assertEquals(beforeTrait, afterTrait);
    }

    // VERIFY STR-1, CON+1, DEX+1
    baseTraits = new TraitList();
    original = baseTraits.toArray();
    _her.adjustTraitsForRace(baseTraits);
    for (int k = 0; k < 6; k++) {
      int beforeTrait = original[k];
      int afterTrait = baseTraits.getTrait(traitName[k]);
      assertEquals(beforeTrait, afterTrait);
    }
  }


  /**
   * @Normal.Test int calcHeight(double minimum, double average) -- Check that a sample of values
   *              falls within the expected range. The base method verifies stats of the method for
   *              all subRaces.
   */
  @Test
  public void testCalcHeight()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
    MsgCtrl.where(this);

    // MALE TEST
    // Height range: male [60, 78]
    int maleMin = 60;
    int maleMax = 78;
    double maleAvg = (maleMin + maleMax) / 2.0;

    // RUN
    for (int k = 0; k < NBR_LOOPS; k++) {
      int height = _mockHim.calcHeight(maleMin, maleAvg);
      assertTrue((height >= maleMin) && (height <= maleMax));
    }

    // FEMALE TEST
    // Height range: female [54, 72]
    int femaleMin = (int) (maleMin * 0.90);
    int femaleMax = (int) (maleMax * 0.90);

    // FEMALE RUN (pass male values because method automatically adjusts for gender)
    for (int k = 0; k < NBR_LOOPS; k++) {
      int height = _mockHer.calcHeight(maleMin, maleAvg);
      assertTrue((height >= femaleMin) && (height <= femaleMax));
    }
  }


  /**
   * @Normal.Test int calcWeight(double minimum, double average) -- Check that a sample of values
   *              falls within the expected range. The base method verifies stats of the method for
   *              all subRaces.
   */
  @Test
  public void testCalcWeight()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
    MsgCtrl.where(this);

    // MALE TEST
    // Weight range: male [130, 230]
    int maleMin = 130;
    int maleMax = 230;
    double maleAvg = (maleMin + maleMax) / 2.0;

    // RUN
    for (int k = 0; k < NBR_LOOPS; k++) {
      int height = _mockHim.calcWeight(maleMin, maleAvg);
      assertTrue((height >= maleMin) && (height <= maleMax));
    }

    // FEMALE TEST
    // Height range: female [117, 217]
    int femaleMin = (int) (maleMin * 0.90);
    int femaleMax = (int) (maleMax * 0.90);

    // FEMALE RUN (pass male values because method automatically adjusts for gender)
    for (int k = 0; k < NBR_LOOPS; k++) {
      int weight = _mockHer.calcWeight(maleMin, maleAvg);
      assertTrue((weight >= femaleMin) && (weight <= femaleMax));
    }
  }



} // end of TestHuman.java class
