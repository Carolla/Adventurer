/**
 * TestHuman.java Copyright (c) 2017, Alan Cline. All Rights Reserved.
 * 
 * Permission to make digital or hard copies of all or parts of this work for commercial use is
 * prohibited. To republish, to post on servers, to reuse, or to redistribute to lists, requires
 * prior specific permission and/or a fee. Request permission to use from acline@carolla.com.
 */

package chronos.test.pdc.race;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import java.util.List;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import chronos.pdc.character.Gender;
import chronos.pdc.character.TraitList;
import chronos.pdc.character.TraitList.PrimeTraits;
import chronos.pdc.race.Human;
import chronos.pdc.race.Race.MockRace;
import mylib.MsgCtrl;

/**
 * @author --generated by QA Tool--
 * @version August 15, 2017 // original <br>
 *          Sept 25, 2017 // moved calcWeight() and calcHeight() into base test class <br>
 */
public class TestHuman
{
  private Human _him;
  private MockRace _mockHim;
  private Human _her;
  private MockRace _mockHer;


  /**
   * @throws java.lang.Exception -- general catch-all for exceptions not caught by the tests
   */
  @BeforeClass
  public static void setUpBeforeClass() throws Exception
  {}

  /**
   * @throws java.lang.Exception -- general catch-all for exceptions not caught by the tests
   */
  @AfterClass
  public static void tearDownAfterClass() throws Exception
  {}

  @Before
  public void setUp()
  {
    _him = new Human(new Gender("male"), "black");
    assertNotNull(_him);
    _mockHim = _him.new MockRace();
    assertNotNull(_mockHim);

    _her = new Human(new Gender("female"), "blonde");
    assertNotNull(_her);
    _mockHer = _her.new MockRace();
    assertNotNull(_mockHer);
  }

  @After
  public void tearDown()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);

    _mockHer = null;
    _her = null;
    _mockHim = null;
    _him = null;
  }


  // ===============================================================================
  // BEGIN TESTING
  // ===============================================================================

  /**
   * @Normal.Test Human(Gender gender, String hairColor) -- verify ctor
   */
  @Test
  public void testCtor()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
    MsgCtrl.where(this);

    // Get fields set during male constructor: race name ("Human"), race lang (null), skills
    // ("None"), gender ("male), and hair color ("black")
    assertEquals("Human", _mockHim.getRaceName());
    assertNull(_mockHim.getRaceLang()); // Humans do not have a race language
    List<String> skills = _him.getSkills(); // Humans do not have race-specific skills
    assertEquals(1, skills.size());
    assertEquals("None", skills.get(0));
    assertEquals("Male", _him.getGender());
    assertEquals("black", _mockHim.getHairColor());

    // Get fields set during female constructor: race name ("Human"), race lang (null), skills
    // ("None"), gender ("female), and hair color ("blonde")
    assertEquals("Human", _mockHer.getRaceName());
    assertNull(_mockHer.getRaceLang()); // Humans do not have a race language
    skills = _her.getSkills(); // Humans do not have race-specific skills
    assertEquals(1, skills.size());
    assertEquals("None", skills.get(0));
    assertEquals("Female", _her.getGender());
    assertEquals("blonde", _mockHer.getHairColor());
  }


  /**
   * @Normal.Test TraitList adjustTraitsForRace(TraitList traits) -- no adjustments for Race, before
   *              gender adjustments. Not actually needed except serves as examplar for non-human
   *              race, where test is needed
   */
  @Test
  public void testAdjustTraitsForRace()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
    MsgCtrl.where(this);

    // SETUP Provide some base traits to be adjusted
    // Dump the prime traits' names for easier processing
    PrimeTraits[] traitName = PrimeTraits.values();

    // Save the original traitlist to another object for later comparison
    TraitList baseTraits = new TraitList();
    int[] original = baseTraits.toArray();

    // VERIFY No trait changes
    _him.adjustTraitsForRace(baseTraits);
    for (int k = 0; k < 6; k++) {
      int beforeTrait = original[k];
      int afterTrait = baseTraits.getTrait(traitName[k]);
      assertEquals(beforeTrait, afterTrait);
    }
  }


  /**
   * @Normal.Test Call the base test calcHeight(Race race, int min, int avg) to allow Race-specific
   *              values to be entered
   */
  @Test
  public void baseTestCalcHeight()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
    MsgCtrl.where(this);

    // Check the default values
    TestRace.baseTestCalcVariance(_him, 60, 78);
    MsgCtrl.msgln("\t Human male height verified");
    // Check the female values
    TestRace.baseTestCalcVariance(_her, 54, 70);
    MsgCtrl.msgln("\t Human female height verified");
  }


  /**
   * @Normal.Test Call the base test calcWeight(Race race, int min, int avg) to allow Race-specific
   *              values to be entered
   */
  @Test
  public void baseTestCalcWeight()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
    MsgCtrl.where(this);

    // Check the default values
    TestRace.baseTestCalcVariance(_him, 130, 230);
    MsgCtrl.msgln("\t Human male weight verified");
    // Check the female values
    TestRace.baseTestCalcVariance(_her, 117, 207);
    MsgCtrl.msgln("\t Human female weight verified");
  }


} // end of TestHuman.java class
