/**
 * TestHalfOrc.java Copyright (c) 2017, Alan Cline. All Rights Reserved.
 * 
 * Permission to make digital or hard copies of all or parts of this work for commercial use is
 * prohibited. To republish, to post on servers, to reuse, or to redistribute to lists, requires
 * prior specific permission and/or a fee. Request permission to use from acline@carolla.com.
 */

package chronos.test.pdc.race;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.List;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import chronos.pdc.character.Gender;
import chronos.pdc.character.TraitList;
import chronos.pdc.character.TraitList.PrimeTraits;
import chronos.pdc.race.HalfOrc;
import chronos.pdc.race.Race.MockRace;
import mylib.MsgCtrl;
import mylib.pdc.MetaDie;

/**
 * @author --generated by QA Tool--
 * @version August 17, 2017 // original <br>
 */
public class TestHalfOrc
{
  private HalfOrc _him;
  private HalfOrc _her;
  private MockRace _mockHim;
  private MockRace _mockHer;

  /**
   * @throws java.lang.Exception -- general catch-all for exceptions not caught by the tests
   */
  @BeforeClass
  public static void setUpBeforeClass() throws Exception
  {}

  /**
   * @throws java.lang.Exception -- general catch-all for exceptions not caught by the tests
   */
  @AfterClass
  public static void tearDownAfterClass() throws Exception
  {}

  /**
   * @throws java.lang.Exception -- general catch-all for exceptions not caught by the tests
   */
  @Before
  public void setUp() throws Exception
  {
    _him = new HalfOrc(new Gender("male"), "black");
    assertNotNull(_him);
    _mockHim = _him.new MockRace();
    assertNotNull(_mockHim);

    _her = new HalfOrc(new Gender("female"), "red");
    assertNotNull(_her);
    _mockHer = _her.new MockRace();
    assertNotNull(_mockHer);
  }

  /**
   * @throws java.lang.Exception -- general catch-all for exceptions not caught by the tests
   */
  @After
  public void tearDown() throws Exception
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);

    _mockHer = null;
    _her = null;
    _mockHim = null;
    _him = null;
  }


  // ===============================================================================
  // BEGIN TESTING
  // ===============================================================================

  /**
   * @Normal.Test HalfOrc(Gender gender, String hairColor) -- verify ctor
   */
  @Test
  public void testCtor()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
    MsgCtrl.where(this);

    String halfOrcSkill = "Infravision (60')";
    String raceLang = "Orcish"; // at 50% chance

    // VERIFY male Half-Orc
    // Get fields set during male constructor: race name ("Half-Orc"), race lang ("Orcish 50%"),
    // skills ("Infravision (60')"), gender ("male), and hair color ("black")
    assertEquals("Half-Orc", _mockHim.getRaceName());
    // Half-Orc's have a 50% chance of knowing Orcish
    String lang = _mockHim.getRaceLang();
    if (!lang.isEmpty()) {
      assertEquals(raceLang, lang);
    }
    // Half-orcs have only one racial skill
    List<String> skills = _him.getSkills();
    assertEquals(1, skills.size());
    MsgCtrl.msgln("\t Male Half-Orc skill: " + skills.get(0));
    assertEquals(halfOrcSkill, skills.get(0));
    assertEquals("Male", _him.getGender());
    assertEquals("black", _mockHim.getHairColor());

    // VERIFY female Half-Orc
    // Get fields set during male constructor: race name ("Half-Orc"), race lang ("Orcish 50%"),
    // skills ("Infravision (60')"), gender ("male), and hair color ("black")
    assertEquals("Half-Orc", _mockHim.getRaceName());
    // Half-Orc's have a 50% chance of knowing Orcish
    lang = _mockHim.getRaceLang();
    if (!lang.isEmpty()) {
      assertEquals(raceLang, lang);
    }
    // Half-orcs have only one racial skill
    skills = _her.getSkills();
    assertEquals(1, skills.size());
    MsgCtrl.msgln("\t Female Half-Orc skill: " + skills.get(0));
    assertEquals(halfOrcSkill, skills.get(0));
    assertEquals("Female", _her.getGender());
    assertEquals("red", _mockHer.getHairColor());
  }


  /**
   * @Normal.Test TraitList adjustTraitsForRace(TraitList traits) -- STR+1, CON+1, CHR-2
   */
  @Test
  public void testAdjustTraitsForRace()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
    MsgCtrl.where(this);

    // SETUP Provide some base traits to be adjusted
    // Dump the prime traits' names for easier processing
    PrimeTraits[] traitName = PrimeTraits.values();

    // Save the original traitlist to another object for later comparison
    TraitList baseTraits = new TraitList();
    int[] original = baseTraits.toArray();

    // Male: VERIFY STR+1, CON+1, CHR-2
    _him.adjustTraitsForRace(baseTraits);
    for (int k = 0; k < 6; k++) {
      int beforeTrait = original[k];
      int afterTrait = baseTraits.getTrait(traitName[k]);
      if (traitName[k] == PrimeTraits.STR) {
        assertEquals(afterTrait, beforeTrait + 1);
      } else if (traitName[k] == PrimeTraits.CON) {
        assertEquals(afterTrait, beforeTrait + 1);
      } else if (traitName[k] == PrimeTraits.CHR) {
        assertEquals(afterTrait, beforeTrait - 2);
      } else {
        assertEquals(beforeTrait, afterTrait);
      }
    }
    // Female: VERIFY STR+1, CON+1, CHR-2
    baseTraits = new TraitList();
    original = baseTraits.toArray();
    _her.adjustTraitsForRace(baseTraits);
    for (int k = 0; k < 6; k++) {
      int beforeTrait = original[k];
      int afterTrait = baseTraits.getTrait(traitName[k]);
      if (traitName[k] == PrimeTraits.STR) {
        assertEquals(afterTrait, beforeTrait + 1);
      } else if (traitName[k] == PrimeTraits.CON) {
        assertEquals(afterTrait, beforeTrait + 1);
      } else if (traitName[k] == PrimeTraits.CHR) {
        assertEquals(afterTrait, beforeTrait - 2);
      } else {
        assertEquals(beforeTrait, afterTrait);
      }
    }
  }


  /**
   * @Normal.Test int calcHeight(int low, String range) -- verify that height is randomly
   *              distributed across range from the low value. Range must be normal distribution of
   *              order 2dN-2.
   */
  @Test
  public void testCalcHeight()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
    MsgCtrl.where(this);

    // int HT_LOW = 60; // range: male [60, 80]; female [54, 74]
    // String HT_RANGE_DICE = "2d11-2"; // varying height = [0 - 20] in
    int[] bin = {60, 66, 73, 80};

    // RUN
    int nbrLoops = 1000;
    double avg = _mockHim.calcHeightWithBins(_him, bin, nbrLoops);

    // Verify Average should be midway between all values
    assertEquals(70.0, avg, 1.0);
    MsgCtrl.msgln("\t Average male height = " + avg);
  }


  /**
   * @Normal.Test int calcHeight(int low, String range) -- verify that height is randomly
   *              distributed across range from the low value. Range must be normal distribution of
   *              order 2dN-2.
   */
  @Test
  public void testCalcHeight_Female()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
    MsgCtrl.where(this);

    // int HT_LOW = 60; // range: male [60, 80]; female [54, 74]
    // String HT_RANGE_DICE = "2d11-2"; // varying height = [0 - 20] in
    int[] bin = {54, 60, 67, 74};

    // RUN
    int nbrLoops = 1000;
    double avg = _mockHer.calcHeightWithBins(_her, bin, nbrLoops);

    // Verify Average should be midway between all values
    assertEquals(64.0, avg, 1.0);
    MsgCtrl.msgln("\t Average female height = " + avg);
  }


  /**
   * @Normal.Test int calcWeight(int low, String range) -- verify that height is randomly
   *              distributed across range from the low value. Range must be normal distribution of
   *              order 2dN-2.
   */
  @Test
  public void testCalcWeight()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
    MsgCtrl.where(this);

    // int WT_LOW = 140; // range: male [140, 260]; female [126, 246]
    // String WT_RANGE_DICE = "2d7-2"; // varying weight = [0 - 120] lb
    int[] bin = {140, 180, 220, 260};

    // RUN
    int nbrLoops = 1000;
    double avg = _mockHim.calcWeightWithBins(_him, bin, nbrLoops);

    // Verify Average should be midway between all values
    MsgCtrl.msgln("\t Average male weight = " + avg);
    assertEquals(200.0, avg, 2.0);
  }


  /**
   * @Normal.Test int calcWeight(int low, String range) -- verify that height is randomly
   *              distributed across range from the low value. Range must be normal distribution of
   *              order 2dN-2.
   */
  @Test
  public void testCalcWeight_Female()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
    MsgCtrl.where(this);

    // int WT_LOW = 140; // range: male [140, 260]; female [126, 246]
    // String WT_RANGE_DICE = "2d7-2"; // varying weight = [0 - 120] lb
    int[] bin = {126, 166, 206, 246};

    // RUN
    int nbrLoops = 1000;
    double avg = _mockHer.calcWeightWithBins(_her, bin, nbrLoops);

    // Verify Average should be midway between all values
    MsgCtrl.msgln("\t Average female weight = " + avg);
    assertEquals(186.0, avg, 2.0);
  }

  
  /**
   * @Normal.Test String getRaceLang() -- 50% chance to know Orcish
   */
  @Test
  public void testGetRaceLang()
  {
    MsgCtrl.auditMsgsOn(true);
    MsgCtrl.errorMsgsOn(true);
    MsgCtrl.where(this);

    int langCount = 0;
    int maxCnt = 0;
    int minCnt =0;

    // Generate many Half-Orcs and see how many times they know orcish
    int count = 1000;
    HalfOrc horc = new HalfOrc(new Gender("male"), "black");
    for (int k=0; k < count; k++) {
      assertNotNull(horc);
      String lang = horc.getRaceLang();
      langCount += (lang.isEmpty()) ? -1 : 1;
      MsgCtrl.msg("\t " + langCount);
      // Print out 100 per line
      if ((k % 20) == 0) {
        MsgCtrl.msgln("");
      }
      maxCnt = Math.max(maxCnt,  langCount);
      minCnt = Math.min(minCnt,  langCount);
    }
    MsgCtrl.msgln("\n\t Lang count after " + count + " tries = " + langCount);
    MsgCtrl.msgln("\t Lang max = " + maxCnt + "; Lang min = " + minCnt);
    assertTrue(Math.abs(langCount) <= 1);    
  }


} // end of TestHalfOrc.java class
