/**
 * TestTownRegistry.java Copyright (c) 2017, Alan Cline. All Rights Reserved.
 * 
 * Permission to make digital or hard copies of all or parts of this work for commercial use is
 * prohibited. To republish, to post on servers, to reuse, or to redistribute to lists, requires
 * prior specific permission and/or a fee. Request permission to use from acline@carolla.com.
 */

package chronos.test.pdc.registry;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.util.ArrayList;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import chronos.pdc.Town;
import chronos.pdc.buildings.Building;
import chronos.pdc.registry.TownRegistry;
import mylib.MsgCtrl;

/**
 * @author --generated by QA Tool--
 * @version July 30, 2017 // original <br>
 */
public class TestTownRegistry
{
  static private TownRegistry _townReg;


  /**
   * @throws java.lang.Exception -- general catch-all for exceptions not caught by the tests
   */
  @BeforeClass
  public static void setUpBeforeClass() throws Exception
  {
    _townReg = new TownRegistry();
  }

  /**
   * @throws java.lang.Exception -- general catch-all for exceptions not caught by the tests
   */
  @AfterClass
  public static void tearDownAfterClass() throws Exception
  {
    _townReg = null;
  }

  /**
   * @throws java.lang.Exception -- general catch-all for exceptions not caught by the tests
   */
  @Before
  public void setUp() throws Exception
  {}

  /**
   * @throws java.lang.Exception -- general catch-all for exceptions not caught by the tests
   */
  @After
  public void tearDown() throws Exception
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
  }


  // ===============================================================================
  // BEGIN TESTING
  // ===============================================================================

  /**
   * @Normal.Test TownRegistry() -- verify proper registry created
   */
  @Test
  public void testCtor()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
    MsgCtrl.where(this);

    // Only one town in the town registry currently
    assertEquals(1, _townReg.size());

    int snippetSize = 50;
    String expTownName = "Biljur'Baz";
    String expDayDesc = "A country road divides a few dilapidated buildings";
    String expNightDesc = "Yellow lights burn in a line along a country road,";
    Town town = _townReg.get(expTownName);
    String townName = town.getName();
    MsgCtrl.msgln("\tTown in registry = " + townName);
    assertEquals(expTownName, townName);

    String dayDesc = town.getDayDescription().substring(0, snippetSize);
    MsgCtrl.msgln("\tDay description snippet = " + dayDesc);
    assertEquals(expDayDesc, dayDesc);

    String nightDesc = town.getNightDescription().substring(0, snippetSize);
    MsgCtrl.msgln("\tNight description snippet = " + nightDesc);
    assertEquals(expNightDesc, nightDesc);
  }


  /**
   * @Normal.Test TownRegistry() -- verify proper number and name of buildings in town
   */
  @Test
  public void testCtor_Buildings()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
    MsgCtrl.where(this);

    // Get all the Buildings for the town in this registry
    Town town = _townReg.get("Biljur'Baz");
    ArrayList<Building> bldgList = (ArrayList<Building>) town.getAllBuildings();
    assertNotNull(bldgList);
    assertEquals(8, bldgList.size());
    MsgCtrl.msgln("\t 8 Buildings in " + town.getName() + ":");
    for (Building s : bldgList) {
      MsgCtrl.msg("\t\t" + s.getName());
    }
  }


  /**
   * @Not.Needed List getTownList() -- getter, but also only one building in registry
   */
  @Test
  public void testGetTownList()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
    MsgCtrl.where(this);
    MsgCtrl.msgln(MsgCtrl.NOTEST + MsgCtrl.GETTER);
  }


  /**
   * @Not.Needed void initialize() -- already testing in ctor tests
   */
  @Test
  public void testInitialize()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
    MsgCtrl.where(this);
    MsgCtrl.msgln(MsgCtrl.NOTEST + MsgCtrl.PRIMITIVE);
  }


} // end of TestTownRegistry.java class
