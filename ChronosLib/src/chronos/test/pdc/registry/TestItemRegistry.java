/** 
 * TestItemRegistry.java Copyright (c) 2017, Alan Cline. All Rights Reserved. 
 * 
 * Permission to make digital or hard copies of all or parts of this work for 
 * commercial use is prohibited. To republish, to post on servers, to reuse, 
 * or to redistribute to lists, requires prior specific permission and/or a fee. 
 * Request permission to use from acline@carolla.com. 
 */

package chronos.test.pdc.registry;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.fail;

import java.util.ArrayList;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import chronos.pdc.Item;
import chronos.pdc.registry.ItemRegistry;
import mylib.MsgCtrl;

/** 
 * @author --generated by QA Tool--
 * @version July 31, 2017    // original <br>
 */
public class TestItemRegistry
{
  static private ItemRegistry _itemReg;

  /**
   * @throws java.lang.Exception -- general catch-all for exceptions not caught by the tests
   */
  @BeforeClass
  public static void setUpBeforeClass() throws Exception
  {
    _itemReg = new ItemRegistry();
    assertNotNull(_itemReg);
  }

  /**
   * @throws java.lang.Exception -- general catch-all for exceptions not caught by the tests
   */
  @AfterClass
  public static void tearDownAfterClass() throws Exception
  {
    _itemReg = null;
  }

  /**
   * @throws java.lang.Exception -- general catch-all for exceptions not caught by the tests
   */
  @Before
  public void setUp() throws Exception
  {}

  /**
   * @throws java.lang.Exception -- general catch-all for exceptions not caught by the tests
   */
  @After
  public void tearDown() throws Exception
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
  }


// ===============================================================================
//		 BEGIN TESTING
// ===============================================================================

  /**
   * @Normal.Test ItemRegistry() -- confirm data is ok
   */
  @Test
  public void testCtor()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
    MsgCtrl.where(this);

    // Verify: there are 46 Items in the registry
    int expEntries = 46;
    ArrayList<Item> entryList = (ArrayList<Item>) _itemReg.getAll();
    assertNotNull(entryList);
    int len = entryList.size();
    MsgCtrl.msgln("\t There are " + len + " Items in the registry");
    assertEquals(expEntries, len);

    // Check the first and last of the occupations
    String name1 = entryList.get(0).getName();
    String name2 = entryList.get(expEntries - 1).getName();
    MsgCtrl.msgln("\t The first Item is " + name1);
    MsgCtrl.msgln("\t The last Item is " + name2);
    assertEquals("Gold pieces", name1);
    assertEquals("Magic bag", name2); 

    // Trying to get one more should lead to an error
    try {
      entryList.get(expEntries).getName();
      fail(MsgCtrl.EXCEPTION_NOT_THROWN);
    } catch (IndexOutOfBoundsException ibex) {
      MsgCtrl.msgln(MsgCtrl.EXP_EXCEPTION + ibex.getMessage());
    }
  }

  
	/**
 	 * @Not.Needed Item getItem(String) -- getter
	 */
	@Test
	public void testGetItem()
	{
		MsgCtrl.auditMsgsOn(false);
		MsgCtrl.errorMsgsOn(false);
		MsgCtrl.where(this);
	   MsgCtrl.msgln(MsgCtrl.NOTEST  + MsgCtrl.GETTER);
	}

	
	/**
  * @Not.Needed Item getItemList() -- tested above
  */
 @Test
 public void testGetItemList()
 {
   MsgCtrl.auditMsgsOn(false);
   MsgCtrl.errorMsgsOn(false);
   MsgCtrl.where(this);
   MsgCtrl.msgln(MsgCtrl.NOTEST  + MsgCtrl.PRIMITIVE);
 }


  /**
   * @Not.Needed void initialize() -- tested above
   */
  @Test
  public void testInitialize()
  {
    MsgCtrl.auditMsgsOn(false);
    MsgCtrl.errorMsgsOn(false);
    MsgCtrl.where(this);
    MsgCtrl.msgln(MsgCtrl.NOTEST  + MsgCtrl.PRIMITIVE);
  }


  
} 	// end of TestItemRegistry.java class
